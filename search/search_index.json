{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about","title":"About","text":"<p>Xe Plugin is a starter WordPress plugin + build process. which have built-in functionalities that are used in almost every plugin. So just focus on the main functionality that you want to built for WordPress.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Plugin Options.</li> <li>Highly Customizable and Easy to Customize.</li> <li>Forever Free.</li> <li>Professional and Outstanding Support.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Latest version of WordPress</li> <li>Latest version of Nodejs</li> <li>Memory Limit: 64M</li> <li>Max Upload Size: 64M</li> </ul>"},{"location":"class-defaults/","title":"Class defaults","text":"<p>This <code>static class</code> is especially used to set default values for Class Plugin Options.</p>"},{"location":"class-defaults/#path","title":"Path","text":"<pre><code>/plugin-folder/helpers/class-defaults.php\n</code></pre>"},{"location":"class-defaults/#add-variable","title":"Add variable","text":"<p>Simply add <code>public static</code> variables inside class and assign default values to it in <code>__construct()</code> function.</p> <pre><code>// General\npublic static $default;\n\nfunction __construct() {\n\n  // General\n  Self::$default = 'default';\n\n}\n</code></pre>"},{"location":"class-defaults/#use-variable","title":"Use variable","text":"<ol> <li>Add <code>use Helpers\\Plugin_Name_Defaults as De</code> on top of the <code>.php</code> file.</li> <li>Use it like <code>De::var_name</code> anywhere you want in your <code>.php</code> file.</li> </ol>"},{"location":"class-helpers/","title":"Class helpers","text":"<p>As the name suggests this <code>static class</code> is for to add all the functions that will ease your plugin development and functionality.</p>"},{"location":"class-helpers/#path","title":"Path","text":"<pre><code>/plugin-folder/helpers/class-helpers.php\n</code></pre>"},{"location":"class-helpers/#how-to-use","title":"How to use?","text":"<p>Simply add <code>public static</code> methods and use them as <code>PHP</code> namespace classes are used.</p> <pre><code>use Helpers\\Plugin_Name_Helpers as Helper;\n\nHelper::method_name();\n</code></pre>"},{"location":"class-helpers/#built-in-methods","title":"Built-in methods","text":"<p>Here are some methods that are already added. You can either use them or remove them if not needed.</p>"},{"location":"class-helpers/#enqueue","title":"enqueue","text":"<p>Enqueue style or script with auto version control. Wrapped on top of both WordPress <code>wp_enqueue_style</code> and <code>wp_enqueue_script</code> functions.</p> <pre><code>enqueue($script, $handle, $src = '', $deps = array(), $media = 'all', $in_footer = true, $ver = '')\n</code></pre> <ul> <li>$script Accepts 'style' or 'script'</li> <li>$handle Name of the script. Should be unique.</li> <li>$src Path of the script relative to plugins folder.</li> <li>$deps An array of registered script handles this script depends on.</li> <li>$media The media for which this stylesheet has been defined.</li> <li>$in_footer Whether to enqueue the script before <code>&lt;/body&gt;</code> instead of in the <code>&lt;head&gt;</code>. Default is <code>true</code>.</li> <li>$ver Version of the script. File time will be used if empty.</li> </ul> <p></p>"},{"location":"class-plugin-options/","title":"Class plugin options","text":"<p>Unlike <code>Default Class</code> this class is not static and is especially used to get values using get_option() for Plugin Options Page.</p>"},{"location":"class-plugin-options/#path","title":"Path","text":"<pre><code>/plugin-folder/helpers/class-plugin-options.php\n</code></pre>"},{"location":"class-plugin-options/#initialize-variables","title":"Initialize variables","text":"<p>Simply add <code>public</code> variables inside class and assign values to it in <code>init_vars()</code> function.</p> <pre><code>$this-&gt;var_name = get_option('unique_id', De::$default);\n</code></pre>"},{"location":"class-plugin-options/#how-to-use","title":"How to use?","text":"<p>This class is initialized by default into a global variable. You can see the variable name at the end of the class.</p> <pre><code>global $xep_opt;\n$xep_opt = new Xe_Plugin_Options();\n</code></pre> <p>You will be able to use any where in your plugin after calling it.</p> <pre><code>global $xep_opt;\necho $xep_opt-&gt;default;\n</code></pre>"},{"location":"class-plugin-options/#built-in-variables","title":"Built-in variables","text":"<p>Here are some variables that are already added. You can either use them or remove them if not needed.</p>"},{"location":"class-plugin-options/#localhost","title":"localhost","text":"<ul> <li>Returns true if the current environment is localhost, and false if its live server.</li> <li>Useful for point of sale plugins.</li> </ul>"},{"location":"class-views/","title":"Class views","text":"<p>Coming Soon...</p> <p></p>"},{"location":"defaults/","title":"Class Defaults","text":"<p>Coming Soon...</p>"},{"location":"functions/","title":"Functions","text":"<p>Coming Soon...</p> <p></p>"},{"location":"helpers/","title":"Class Helpers","text":"<p>Coming Soon...</p>"},{"location":"main/","title":"Main","text":"<ul> <li>Main plugin file is only used to <code>require</code> other files.</li> <li>You can change that according to your requirements.</li> </ul>"},{"location":"start/","title":"Let's Start","text":""},{"location":"start/#get-starter-plugin","title":"Get Starter Plugin","text":"<p>Download fresh copy of Xe Plugin and extract it to you development environment. Change folder name to your theme name. e.g: <code>xurais</code> or <code>xu-rais</code>.</p>"},{"location":"start/#install-nodejs","title":"Install Nodejs","text":"<p>Nodejs is a JavaScript runtime built on Chrome's V8 JavaScript engine.  Install the latest version from their website if you don't have it installed already. You can check <code>Nodejs</code> version using the following command.</p> <pre><code>node -v\n</code></pre> <p>You can check <code>npm</code> version using the following command.</p> <pre><code>npm -v\n</code></pre>"},{"location":"start/#initialization","title":"Initialization","text":"<ol> <li>Navigate to <code>node_scripts</code> folder.</li> <li>Open <code>config.json</code> with your favorite editor.</li> <li> <p>Change <code>name</code> to your theme name. eg: <code>Xurais</code> or <code>Xu Rais</code> (Capitalized).</p> <pre><code>\"name\": \"Xurais\",\n</code></pre> </li> <li> <p>Chang <code>global</code> to a friendly and short name. eg: <code>xur</code> or <code>xura</code> (Lowercase).</p> <pre><code>\"global\": \"xur\",\n</code></pre> </li> <li> <p>Open command line, navigate to project folder and run this command to install dependencies:</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Now run following command to automatically change <code>text-domain</code>, <code>prefixes</code>, <code>DocBlocks</code>, <code>global variables</code> and <code>global object (JavaScript)</code> according to your <code>config.json</code> file.</p> <pre><code>npm run init\n</code></pre> </li> </ol>"},{"location":"start/#build","title":"Build","text":"<p>Open <code>config.json</code> inside <code>node_scripts</code> folder and change <code>build</code> path to your desired location.</p> <pre><code>\"build\": \"E:/Projects/Xe Plugin\",\n</code></pre> <p>Once you have completed your plugin, run the below command to generate a clean copy. <code>.pot</code> file will also be generated inside languages folder.</p> <pre><code>npm run build\n</code></pre> <p></p>"},{"location":"support/","title":"Support","text":"<p>If you have any difficulties, questions or bugs to report feel free to open an issue on Github Repository.</p>"},{"location":"support/#working-hours-gmt-5","title":"Working Hours (GMT +5)","text":"<ul> <li>Winter: 9:00am \u2013 5:00pm</li> <li>Summer: 8:00am \u2013 6:00pm</li> </ul>"}]}